# Note that if you are working on the analysis development locally, i.e. outside
# of the REANA platform, you can proceed as follows:
#
#   $ mkdir snakemake-local-run
#   $ cd snakemake-local-run
#   $ virtualenv ~/.virtualenvs/root6-roofit-snakemake
#   $ source ~/.virtualenvs/root6-roofit-snakemake/bin/activate
#   $ pip install snakemake
#   $ cp -a ../code .
#   $ snakemake -s ../workflow/snakemake/Snakefile \
#               --configfile ../workflow/snakemake/inputs.yaml -p --cores 1
#   $ open results/plot.png

rule all:
    input:
        "results/data.root",
        "results/plot.png"

rule gendata:
    """
    Rule for generating data. It uses gendata.C script to generate signal and background data.
    """
    input:
        gendata_tool=config["gendata"]
    output:
        report("results/data.root", caption="report/signal-background-data.rst", category="Workflow output files")
    params:
        events=config["events"]
    container:
        "docker://docker.io/reanahub/reana-env-root6:6.18.04"
    resources:
        kubernetes_memory_limit="256Mi"
    shell:
        "mkdir -p results && root -b -q '{input.gendata_tool}({params.events},\"{output}\")'"

rule fitdata:
    """
    Rule for fitting the data. It uses fitdata.C script for fitting the signal and background data.
    """
    input:
        fitdata_tool=config["fitdata"],
        data="results/data.root"
    output:
        report("results/plot.png", caption="report/plot.rst", category="Workflow output files")

    container:
        "docker://docker.io/reanahub/reana-env-root6:6.18.04"
    resources:
        kubernetes_memory_limit="256Mi"
    shell:
        "root -b -q '{input.fitdata_tool}(\"{input.data}\",\"{output}\")'"
